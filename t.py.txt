import pandas as pd
from datetime import datetime, timedelta

# Assuming your original DataFrame is named df
# If your date column is not in datetime format, convert it first
df['assessment_approval_date'] = pd.to_datetime(df['assessment_approval_date'], format='%d/%m/%Y %H:%M')

# Create a new DataFrame to store the transformed data
transformed_df = pd.DataFrame(columns=['gcdu_id', 'date', 'assessment_approved_crr'])

# Iterate through each row in the original DataFrame
for index, row in df.iterrows():
    gcd_id = row['GCDU_ID']
    start_date = datetime(row['assessment_approval_date'].year, row['assessment_approval_date'].month, 1)

    # Adjust month and year accordingly to prevent ValueError
    end_date_month = (row['assessment_approval_date'].month % 12) + 1
    end_date_year = row['assessment_approval_date'].year + row['assessment_approval_date'].month // 12

    end_date = datetime(end_date_year, end_date_month, 1) - timedelta(days=1)

    # Generate a range of dates from start_date to end_date with a frequency of one day
    date_range = pd.date_range(start_date, end_date, freq='D')

    # Create a DataFrame with the generated dates and the corresponding assessment value
    temp_df = pd.DataFrame({'gcdu_id': gcd_id, 'date': date_range, 'assessment_approved_crr': row['assessment_approved_crr']})

    # Append the temporary DataFrame to the transformed DataFrame
    transformed_df = pd.concat([transformed_df, temp_df])

# Sort the final DataFrame by gcdu_id and date
transformed_df = transformed_df.sort_values(by=['gcdu_id', 'date']).reset_index(drop=True)

# Print the final transformed DataFrame
print(transformed_df)
