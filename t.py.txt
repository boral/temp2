import numpy as np
import scipy.stats
from scipy.optimize import brentq

class PT_variN:
    def __init__(self, df, rho, theta):
        self.N = df['Obligors'].tolist()
        self.T = len(self.N)
        self.rho = rho
        self.theta = theta
        self.Nmax = max(self.N)
        self.rng = np.random.default_rng()
        self.mu = np.zeros(self.T)
        self.sigma = self._calculate_sigma()

    def _calculate_sigma(self):
        sigma = np.zeros((self.T, self.T))
        for i in range(self.T):
            for j in range(self.T):
                sigma[i][j] = np.power(self.theta, abs(i - j))
        return sigma

    def sum_of_defaults(self, PD):
        ideosyncratic_full_box = self.rng.normal(size=(self.Nmax, self.T))
        systematic_box = np.array([self.rng.multivariate_normal(self.mu, self.sigma, 1)[0]] * self.Nmax)
        
        for j, k in enumerate(self.N):
            ideosyncratic_full_box[k:, j] = np.nan
            systematic_box[k:, j] = np.nan

        asset_return = np.sqrt(self.rho) * systematic_box + np.sqrt(1 - self.rho) * ideosyncratic_full_box
        asset_return[np.isnan(asset_return)] = 99999
        defaults = asset_return < scipy.stats.norm.ppf(PD)
        return defaults.sum()

    def simulation(self, PD, num_simulation):
        return np.array([self.sum_of_defaults(PD) for _ in range(num_simulation)])

    def obj_func(self, PD, num_simulation, N_defaults, confidence_level):
        alpha = 1 - np.mean(self.simulation(PD, num_simulation) <= N_defaults)
        return alpha - confidence_level

    def calculate_pd(self, num_simulation, N_defaults, confidence_level):
        return brentq(self.obj_func, a=1e-7, b=1 - 1e-7, args=(num_simulation, N_defaults, confidence_level))
