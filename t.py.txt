import numpy as np
import scipy.stats
from scipy.optimize import brentq

class PT_variN:
    def __init__(self, df, rho, theta):
        self.N = df['gcdu_id'].values
        self.T = len(self.N)
        self.rho = rho
        self.theta = theta
        self.Nmax = max(self.N)
        self.rng = np.random.default_rng()
        self.mu = np.zeros(self.T)
        self.sigma = self._calculate_sigma()

    def _calculate_sigma(self):
        abs_diff = np.abs(np.subtract.outer(np.arange(self.T), np.arange(self.T)))
        return np.power(self.theta, abs_diff)

    def sum_of_defaults(self, PD):
        idiosyncratic_full_box = self.rng.normal(size=(self.Nmax, self.T))
        systematic_box = np.tile(self.rng.multivariate_normal(self.mu, self.sigma, 1), (self.Nmax, 1))

        mask = np.arange(self.Nmax)[:, None] >= self.N
        idiosyncratic_full_box[mask] = np.nan
        systematic_box[mask] = np.nan

        asset_return = np.sqrt(self.rho) * systematic_box + np.sqrt(1 - self.rho) * idiosyncratic_full_box
        asset_return[np.isnan(asset_return)] = 99999
        defaults = asset_return < scipy.stats.norm.ppf(PD)
        return np.sum(defaults)

    def simulation(self, PD, num_simulation):
        return np.array([self.sum_of_defaults(PD) for _ in range(num_simulation)])

    def obj_func(self, PD, num_simulation, N_defaults, confidence_level):
        alpha = 1 - np.mean(self.simulation(PD, num_simulation) <= N_defaults)
        return alpha - confidence_level

    def calculate_pd(self, num_simulation, N_defaults, confidence_level):
        return brentq(self.obj_func, a=1e-7, b=1 - 1e-7, args=(num_simulation, N_defaults, confidence_level))

# Initialise empty lists to store results
pd_best_estimate = []
pd_conservative = []

for i in range(1, 13):
    print(i)
    X = PT_variN(df=lradr_data[lradr_data.cohort_month == i], rho=0.18, theta=0.7)
    pd_best_estimate.append(X.calculate_pd(500, n_defaults, 0.50))
    pd_conservative.append(X.calculate_pd(500, n_defaults, 0.85))

pd_best_estimate_final = np.mean(pd_best_estimate)
pd_conservative_final = np.mean(pd_conservative) + np.std(pd_conservative)
